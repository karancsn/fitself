{"version":3,"file":"js/297.a6c3bed45c8e419583af.js","mappings":"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","sources":["webpack://fitself/./node_modules/@oracle/oraclejet/dist/js/libs/oj/debug/ojtreedataprovideradapter.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2014, 2023, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\ndefine(['ojs/ojcore-base', 'ojs/ojdataprovideradapter-base', 'ojs/ojdataprovider', 'ojs/ojmap'], function (oj, DataSourceAdapter, ojdataprovider, KeyMap) { 'use strict';\n\n    oj = oj && Object.prototype.hasOwnProperty.call(oj, 'default') ? oj['default'] : oj;\n    DataSourceAdapter = DataSourceAdapter && Object.prototype.hasOwnProperty.call(DataSourceAdapter, 'default') ? DataSourceAdapter['default'] : DataSourceAdapter;\n    KeyMap = KeyMap && Object.prototype.hasOwnProperty.call(KeyMap, 'default') ? KeyMap['default'] : KeyMap;\n\n    class TreeDataSourceAdapter extends DataSourceAdapter {\n        constructor(treeDataSource) {\n            super(treeDataSource);\n            this.treeDataSource = treeDataSource;\n            this._addTreeDataSourceEventListeners();\n            this._parentKey = null;\n            this._parentInfoMap = new KeyMap();\n        }\n        destroy() {\n            this._removeTreeDataSourceEventListeners();\n        }\n        getChildDataProvider(parentKey) {\n            if (this._parentInfoMap.has(parentKey)) {\n                const childDataProvider = new TreeDataSourceAdapter(this.treeDataSource);\n                childDataProvider._parentKey = parentKey;\n                childDataProvider._parentInfoMap = this._parentInfoMap;\n                return childDataProvider;\n            }\n            return null;\n        }\n        fetchFirst(params) {\n            return new this.AsyncIterable(new this.AsyncIterator(this._getFetchFunc(params), params));\n        }\n        getTotalSize() {\n            return Promise.resolve(this.treeDataSource.getChildCount(this._parentKey));\n        }\n        isEmpty() {\n            const count = this.treeDataSource.getChildCount();\n            if (count === -1) {\n                return 'unknown';\n            }\n            return count > 0 ? 'no' : 'yes';\n        }\n        getCapability(capabilityName) {\n            if (capabilityName === TreeDataSourceAdapter._SORT &&\n                this.treeDataSource.getCapability(capabilityName) === 'full') {\n                return { attributes: 'multiple' };\n            }\n            else if (capabilityName === 'fetchByKeys') {\n                return { implementation: 'iteration' };\n            }\n            else if (capabilityName === 'fetchByOffset') {\n                return { implementation: 'iteration' };\n            }\n            return null;\n        }\n        _getFetchFunc(params) {\n            const self = this;\n            if (params != null && params[TreeDataSourceAdapter._SORTCRITERIA] != null) {\n                const attribute = params[TreeDataSourceAdapter._SORTCRITERIA][0][TreeDataSourceAdapter._ATTRIBUTE];\n                const direction = params[TreeDataSourceAdapter._SORTCRITERIA][0][TreeDataSourceAdapter._DIRECTION];\n                return (function (attribute, direction) {\n                    return function (params, fetchFirst) {\n                        if (fetchFirst) {\n                            const sortParam = {};\n                            sortParam[TreeDataSourceAdapter._KEY] = attribute;\n                            sortParam[TreeDataSourceAdapter._DIRECTION] = direction;\n                            return new Promise(function (resolve, reject) {\n                                self.treeDataSource.sort(sortParam, {\n                                    success() {\n                                        resolve(self._getTreeDataSourceFetch(params)(params));\n                                    },\n                                    error(err) {\n                                        reject(err);\n                                    }\n                                });\n                            });\n                        }\n                        else {\n                            return self._getTreeDataSourceFetch(params)(params);\n                        }\n                    };\n                })(attribute, direction);\n            }\n            else {\n                return this._getTreeDataSourceFetch(params);\n            }\n        }\n        _getTreeDataSourceFetch(params) {\n            const self = this;\n            return function (params) {\n                const sortCriteria = self.treeDataSource.getSortCriteria();\n                if (sortCriteria !== null &&\n                    sortCriteria[TreeDataSourceAdapter._DIRECTION] != 'none' &&\n                    params[TreeDataSourceAdapter._SORTCRITERIA] == null) {\n                    params[TreeDataSourceAdapter._SORTCRITERIA] = [];\n                    const sortCriterion = new self.SortCriterion(self, sortCriteria[TreeDataSourceAdapter._KEY], sortCriteria[TreeDataSourceAdapter._DIRECTION]);\n                    params[TreeDataSourceAdapter._SORTCRITERIA].push(sortCriterion);\n                }\n                self._isFetching = true;\n                return new Promise(function (resolve, reject) {\n                    self.treeDataSource.fetchChildren(self._parentKey, { start: 0, end: -1 }, {\n                        success(nodeSet) {\n                            self._isFetching = false;\n                            const resultData = [];\n                            const resultMetadata = [];\n                            const start = nodeSet.getStart();\n                            const count = nodeSet.getCount();\n                            let i, data, metadata;\n                            for (i = 0; i < count; i++) {\n                                data = nodeSet.getData(start + i);\n                                resultData.push(data);\n                                metadata = nodeSet.getMetadata(start + i);\n                                if (!metadata[TreeDataSourceAdapter._LEAF]) {\n                                    self._parentInfoMap.set(metadata[TreeDataSourceAdapter._KEY], metadata);\n                                }\n                                resultMetadata.push(new self.ItemMetadata(self, metadata[TreeDataSourceAdapter._KEY]));\n                            }\n                            resolve(new self.AsyncIteratorReturnResult(self, new self.FetchListResult(self, params, resultData, resultMetadata)));\n                        },\n                        error(error) {\n                            self._isFetching = false;\n                            reject(error);\n                        }\n                    });\n                });\n            };\n        }\n        _addTreeDataSourceEventListeners() {\n            this.removeAllListeners();\n            this.addListener('change', this._handleChange);\n            this.addListener('refresh', this._handleRefresh);\n        }\n        _removeTreeDataSourceEventListeners() {\n            this.removeListener('change');\n            this.removeListener('refresh');\n        }\n        _handleChange(event) {\n            const operation = event[TreeDataSourceAdapter._OPERATION];\n            if (operation === 'insert') {\n                this._handleInsert(event);\n            }\n            else if (operation === 'delete') {\n                this._handleDelete(event);\n            }\n            else if (operation === 'update') {\n                this._handleUpdate(event);\n            }\n        }\n        _handleInsert(event) {\n            const data = event[TreeDataSourceAdapter._DATA];\n            const index = event[TreeDataSourceAdapter._INDEX];\n            const key = event[TreeDataSourceAdapter._KEY];\n            const parentKey = event[TreeDataSourceAdapter._PARENT];\n            const itemMetadata = new this.ItemMetadata(this, key);\n            const keySet = new Set();\n            keySet.add(key);\n            const metadata = event[TreeDataSourceAdapter._METADATA];\n            if (metadata != null && metadata[TreeDataSourceAdapter._LEAF]) {\n                this._parentInfoMap.set(key, metadata);\n            }\n            const operationEventDetail = new this.DataProviderAddOperationEventDetail(this, keySet, null, null, [parentKey], [itemMetadata], [data], [index]);\n            const mutationEventDetail = new this.DataProviderMutationEventDetail(this, operationEventDetail, null, null);\n            this.dispatchEvent(new ojdataprovider.DataProviderMutationEvent(mutationEventDetail));\n        }\n        _handleDelete(event) {\n            const data = event[TreeDataSourceAdapter._DATA];\n            const index = event[TreeDataSourceAdapter._INDEX];\n            const key = event[TreeDataSourceAdapter._KEY];\n            const itemMetadata = new this.ItemMetadata(this, key);\n            const keySet = new Set();\n            keySet.add(key);\n            this._parentInfoMap.delete(key);\n            const operationEventDetail = new this.DataProviderOperationEventDetail(this, keySet, [itemMetadata], [data], [index]);\n            const mutationEventDetail = new this.DataProviderMutationEventDetail(this, null, operationEventDetail, null);\n            this.dispatchEvent(new ojdataprovider.DataProviderMutationEvent(mutationEventDetail));\n        }\n        _handleUpdate(event) {\n            let data = event[TreeDataSourceAdapter._DATA];\n            let index = event[TreeDataSourceAdapter._INDEX];\n            let key = event[TreeDataSourceAdapter._KEY];\n            let itemMetadata = new this.ItemMetadata(this, key);\n            let keySet = new Set();\n            keySet.add(key);\n            let operationEventDetail = new this.DataProviderOperationEventDetail(this, keySet, [itemMetadata], [data], [index]);\n            let mutationEventDetail = new this.DataProviderMutationEventDetail(this, null, null, operationEventDetail);\n            self.dispatchEvent(new ojdataprovider.DataProviderMutationEvent(mutationEventDetail));\n        }\n        _handleRefresh(event) {\n            if (!this._isFetching) {\n                this._parentInfoMap.clear();\n                this.dispatchEvent(new ojdataprovider.DataProviderRefreshEvent());\n            }\n        }\n    }\n    TreeDataSourceAdapter._SORTCRITERIA = 'sortCriteria';\n    TreeDataSourceAdapter._INDEX = 'index';\n    TreeDataSourceAdapter._PARENT = 'parent';\n    TreeDataSourceAdapter._LEAF = 'leaf';\n    TreeDataSourceAdapter._OPERATION = 'operation';\n    oj._registerLegacyNamespaceProp('TreeDataSourceAdapter', TreeDataSourceAdapter);\n    ojdataprovider.FetchByKeysMixin.applyMixin(TreeDataSourceAdapter);\n    ojdataprovider.FetchByOffsetMixin.applyMixin(TreeDataSourceAdapter);\n\n    return TreeDataSourceAdapter;\n\n});\n"],"names":["oj","DataSourceAdapter","ojdataprovider","KeyMap","Object","prototype","hasOwnProperty","call","TreeDataSourceAdapter","constructor","treeDataSource","super","this","_addTreeDataSourceEventListeners","_parentKey","_parentInfoMap","destroy","_removeTreeDataSourceEventListeners","getChildDataProvider","parentKey","has","childDataProvider","fetchFirst","params","AsyncIterable","AsyncIterator","_getFetchFunc","getTotalSize","Promise","resolve","getChildCount","isEmpty","count","getCapability","capabilityName","_SORT","attributes","implementation","self","_SORTCRITERIA","attribute","_ATTRIBUTE","direction","_DIRECTION","sortParam","_KEY","reject","sort","success","_getTreeDataSourceFetch","error","err","sortCriteria","getSortCriteria","sortCriterion","SortCriterion","push","_isFetching","fetchChildren","start","end","nodeSet","resultData","resultMetadata","getStart","getCount","i","data","metadata","getData","getMetadata","_LEAF","set","ItemMetadata","AsyncIteratorReturnResult","FetchListResult","removeAllListeners","addListener","_handleChange","_handleRefresh","removeListener","event","operation","_OPERATION","_handleInsert","_handleDelete","_handleUpdate","_DATA","index","_INDEX","key","_PARENT","itemMetadata","keySet","Set","add","_METADATA","operationEventDetail","DataProviderAddOperationEventDetail","mutationEventDetail","DataProviderMutationEventDetail","dispatchEvent","DataProviderMutationEvent","delete","DataProviderOperationEventDetail","clear","DataProviderRefreshEvent","_registerLegacyNamespaceProp","FetchByKeysMixin","applyMixin","FetchByOffsetMixin"],"sourceRoot":""}