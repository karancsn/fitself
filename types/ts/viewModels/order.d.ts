/// <reference types="ojmodulerouter-adapter" />
import { DataProvider } from "ojs/ojdataprovider";
import * as ko from "knockout";
import { ojListView } from "ojs/ojlistview";
import { ojModule } from "ojs/ojmodule-element";
import { ojButton, ojButtonEventMap } from 'ojs/ojbutton';
import { ojInputNumber } from 'ojs/ojinputnumber';
import { IntlNumberConverter } from "ojs/ojconverter-number";
import { Model, Collection } from "ojs/ojmodel";
import { ExpandAllKeySet } from "ojs/ojkeyset";
import ModuleRouterAdapter = require("ojs/ojmodulerouter-adapter");
import "ojs/ojbutton";
import "ojs/ojinputnumber";
import "ojs/ojinputtext";
import "ojs/ojlistitemlayout";
import "ojs/ojlistview";
import "ojs/ojtable";
import { CoreRouterDetail } from "../appController";
import { IProduct, ProductCategory, RouterParameters } from "../interfaces";
declare class OrderViewModel {
    headerConfig: ko.Observable<ojModule["config"]>;
    footerConfig: ko.Observable<ojModule["config"]>;
    productCatalogue: ko.ObservableArray<ProductCategory>;
    prodDataProvider: ojListView<string, ProductCategory>["data"];
    filteredDataProvider: DataProvider<string, IProduct> | undefined;
    collection: Collection | undefined;
    filteredCollection: Collection | undefined;
    expanded: ExpandAllKeySet<string>;
    effectiveDate: ko.Observable<string>;
    filterVal: ko.Observable<string>;
    noGroupingNumberConverter: IntlNumberConverter;
    private readonly args;
    dataProvider: ko.Observable<DataProvider<string, ProductCategory>> | ko.Observable<DataProvider<string, IProduct>>;
    itemCount: ko.PureComputed<number>;
    cartProdItems: ko.ObservableArray<IProduct>;
    constructor(args: ModuleRouterAdapter.ViewModelParameters<CoreRouterDetail, RouterParameters>);
    connected(): void;
    disconnected(): void;
    transitionCompleted(): void;
    adjustContentPadding(): void;
    flattenJSON(data: ProductCategory[]): Collection;
    nameFilter(model: Model, attr: string, value: string): boolean;
    handleInputNumber: (event: ojInputNumber.valueChanged, data: any) => void;
    handleRawValueChanged: (event: any) => void;
    addToCart: (event: ojButton.ojAction, data: any, context: any) => void;
    checkout: (event: ojButton.ojAction, data: any, context: any) => void;
    prepareListData: (response: any) => void;
    fadeIn(element: HTMLElement, duration: number): void;
    fadeOut(element: HTMLElement, duration: number): void;
    itemOnly(context: ojListView.ItemContext<string, ProductCategory>): boolean | undefined;
    emptyCart: (event: ojButtonEventMap['ojAction']) => boolean;
}
export = OrderViewModel;
